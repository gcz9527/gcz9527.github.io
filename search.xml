<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown语法</title>
    <url>/2020/10/20/Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6> <a id="more"></a>

<h2 id="2-段落"><a href="#2-段落" class="headerlink" title="2.段落"></a>2.段落</h2><p> 2*空格+回车</p>
<h2 id="3-列表（-）"><a href="#3-列表（-）" class="headerlink" title="3.列表（* + -）"></a>3.列表（* + -）</h2><ul>
<li><p>第一项</p>
<ul>
<li><p>第二项</p>
<ul>
<li>第三项</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4-区块（-gt-）"><a href="#4-区块（-gt-）" class="headerlink" title="4.区块（&gt;）"></a>4.区块（&gt;）</h2><blockquote>
<p>最外层</p>
<blockquote>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="5-代码（-）"><a href="#5-代码（-）" class="headerlink" title="5.代码（````）"></a>5.代码（````）</h2><p><code> &lt;html&gt;&lt;/html&gt;</code>标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">​```</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>代码块<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="6-链接"><a href="#6-链接" class="headerlink" title="6.链接"></a>6.链接</h2><p>[链接名称]（链接地址）或者&lt;链接地址&gt;</p>
<p>Google <a href="https://www.google.com/">Google</a></p>
<h2 id="7-图片"><a href="#7-图片" class="headerlink" title="7.图片"></a>7.图片</h2><p><code> ![alt 属性文本]（图片地址 “可选标题”）</code></p>
<p><img src="" alt="alt 属性文本"></p>
<h2 id="8-表格"><a href="#8-表格" class="headerlink" title="8.表格"></a>8.表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​&#96;&#96;&#96;</span><br><span class="line">｜ 表头  ｜ 表头 ｜</span><br><span class="line">｜ ---  ｜ ---  ｜</span><br><span class="line">｜ 单元格｜ 单元格 ｜</span><br><span class="line">｜ 单元格 ｜ 单元格 ｜ </span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>——</td>
<td>——</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="9-高级技巧"><a href="#9-高级技巧" class="headerlink" title="9.高级技巧"></a>9.高级技巧</h2><p> <a href="https://www.runoob.com/markdown/md-advance.html">Markdown高级技巧</a></p>
]]></content>
      <categories>
        <category>规则</category>
      </categories>
      <tags>
        <tag>Md语法</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo常用命令</title>
    <url>/2020/10/21/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="1-新建文件"><a href="#1-新建文件" class="headerlink" title="1.新建文件"></a>1.新建文件</h2><p><code> hexo n [name]</code></p>
<h2 id="2-本地操作"><a href="#2-本地操作" class="headerlink" title="2.本地操作"></a>2.本地操作</h2><p><code> hexo clean 清除</code></p>
<p><code> hexo s 启动服务</code></p>
<h2 id="3-提交仓库"><a href="#3-提交仓库" class="headerlink" title="3.提交仓库"></a>3.提交仓库</h2><p><code>hexo clean &amp; hexo deploy</code></p>
 <a id="more"></a>]]></content>
      <categories>
        <category>规则</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2020/10/21/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="2020年10月"><a href="#2020年10月" class="headerlink" title="2020年10月"></a>2020年10月</h1><h2 id="如何学习Java300集"><a href="#如何学习Java300集" class="headerlink" title="如何学习Java300集"></a>如何学习Java300集</h2><p>学习价值观：</p>
<p>知识体系建立为第一目标；</p>
<p>遇到难点不纠结，一个月后再会看难点。</p>
<h2 id="1-Java入门"><a href="#1-Java入门" class="headerlink" title="1.Java入门"></a>1.Java入门</h2><h4 id="1-1计算机发展史和未来方向"><a href="#1-1计算机发展史和未来方向" class="headerlink" title="1.1计算机发展史和未来方向"></a>1.1计算机发展史和未来方向</h4><p>计算机核心为：算法，语言是实现算法的工具；</p>
<p>机器语言-&gt;汇编语言-&gt;高级语言</p>
<h4 id="1-2多种编程语言介绍"><a href="#1-2多种编程语言介绍" class="headerlink" title="1.2多种编程语言介绍"></a>1.2多种编程语言介绍</h4><p>C语言、C++、Java语言、PHP、Object-C/Swift（苹果、JavaScript、Python、C#、Fortran、Basic</p>
<h4 id="1-3Java的发展历史和未来"><a href="#1-3Java的发展历史和未来" class="headerlink" title="1.3Java的发展历史和未来"></a>1.3Java的发展历史和未来</h4><p>1991年，SUN公司的Green项目，Oak</p>
<p>1996年，JDK1.0</p>
<p>1998年，JDK1.2</p>
<p>2014年，JDK8.0</p>
<h4 id="1-4Java的核心优势和生态体系"><a href="#1-4Java的核心优势和生态体系" class="headerlink" title="1.4Java的核心优势和生态体系"></a>1.4Java的核心优势和生态体系</h4><p>核心优势：跨平台</p>
 <a id="more"></a>

<h4 id="1-6Java三大版本含义"><a href="#1-6Java三大版本含义" class="headerlink" title="1.6Java三大版本含义"></a>1.6Java三大版本含义</h4><p>JavaSE（Java Standard Edition）标准版，定位在个人计算机上的应用；</p>
<p>JavaEE(Java Enterprise Edition) 企业版，定位在服务器端的应用；</p>
<p>JavaME(Java Micro Edition)微型版，定位在消费电子产品的应用上；</p>
<h4 id="1-7Java的特性和优势"><a href="#1-7Java的特性和优势" class="headerlink" title="1.7Java的特性和优势"></a>1.7Java的特性和优势</h4><p>跨平台/可移植性；</p>
<p>安全性；</p>
<p>面向对象性；</p>
<p>简单性；</p>
<p>高性能；</p>
<p>分布式；</p>
<p>多线程；</p>
<p>健壮性；</p>
<h4 id="1-8PJava应用程序的运行机制"><a href="#1-8PJava应用程序的运行机制" class="headerlink" title="1.8PJava应用程序的运行机制"></a>1.8PJava应用程序的运行机制</h4><p><code>源文件（*.java）-&gt;Java编辑器-&gt;字节码文件（*.class）</code></p>
<p>运行在JRE，JRE运行在系统平台；</p>
<p>Java是编译型+解释型的语言；</p>
<h4 id="1-9JDK、JRE、JVM的作用和区别"><a href="#1-9JDK、JRE、JVM的作用和区别" class="headerlink" title="1.9JDK、JRE、JVM的作用和区别"></a>1.9JDK、JRE、JVM的作用和区别</h4><p>JVM（Java Vitual Machine）就是一个虚拟的用于执行bytecode字节码的虚拟计算机。</p>
<p>Java Runtime Environment(JRE)包含：Java虚拟机、库函数、运行Java应用程序所必须的文件。</p>
<p>Java Development Kit(JDK)包含JRE，以及增加编译器和调试器等用于程序开发的文件。</p>
<p>包含关系：JDK&gt;JRE&gt;JVM </p>
<p>JDK下载和安装</p>
<p>1.下载JDK（对应系统版本）</p>
<p>2.简单目录说明（bin、lib、src.zip）</p>
<p>JDK环境变量PATH设置</p>
<p>1.配置JAVA_HOME</p>
<p>2.Windows配置Path（%JAVA_HOME%\bin;）</p>
<p>Mac</p>
<p>vim ~/.bash_profile 配置JDK地址</p>
<h4 id="1-10控制台测试JDK安装和配置"><a href="#1-10控制台测试JDK安装和配置" class="headerlink" title="1.10控制台测试JDK安装和配置"></a>1.10控制台测试JDK安装和配置</h4><p>Windows: cmd 输入 java-version</p>
<h4 id="1-11写出第一个Java程序"><a href="#1-11写出第一个Java程序" class="headerlink" title="1.11写出第一个Java程序"></a>1.11写出第一个Java程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcome</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello word!&quot;</span>)；</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释并运行：<code>java Welcome</code></p>
<h4 id="1-12第一个Java程序详细解析"><a href="#1-12第一个Java程序详细解析" class="headerlink" title="1.12第一个Java程序详细解析"></a>1.12第一个Java程序详细解析</h4><p>1.Java大小写敏感的语言；</p>
<p>2.一个源文件中至多只能声明一个public的类，其他类的个数不限。</p>
<h4 id="1-13最常用的DOS命令"><a href="#1-13最常用的DOS命令" class="headerlink" title="1.13最常用的DOS命令"></a>1.13最常用的DOS命令</h4><p>1.cd 目录路径 进入一个目录</p>
<p>2.cd .. 进入父目录</p>
<p>3.dir 查看本目录下的文件和子目录列表</p>
<p>4.cls 清楚屏幕命令</p>
<p>5.上下键 查找敲过的命令</p>
<p>6.Tab键 自动补齐命令</p>
<h4 id="1-14常用开发工具介绍"><a href="#1-14常用开发工具介绍" class="headerlink" title="1.14常用开发工具介绍"></a>1.14常用开发工具介绍</h4><p>eclipse</p>
<p>IntelliJ IDE</p>
<p>NetBeans</p>
<h4 id="1-15eclipse下载版本选择和使用"><a href="#1-15eclipse下载版本选择和使用" class="headerlink" title="1.15eclipse下载版本选择和使用"></a>1.15eclipse下载版本选择和使用</h4><p>Eclipse IDE for Java Developers（根据安装的JDK）</p>
<p>eclipse下建立Java项目</p>
<p>目录结构（src、bin、JRE）</p>
<p>eclipse开发和运行Java程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		System.out.println(<span class="string">&quot;Welcome Java&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2数据类型和运算符"><a href="#2数据类型和运算符" class="headerlink" title="2数据类型和运算符"></a>2数据类型和运算符</h2><h4 id="2-1注释"><a href="#2-1注释" class="headerlink" title="2.1注释"></a>2.1注释</h4><p>单行注释： //</p>
<p>多行注释：<code> 以/*开头，以*/结尾</code></p>
<p>文档注释：<code> 以/**开头，以*/结尾</code></p>
<h4 id="2-2标识符规则"><a href="#2-2标识符规则" class="headerlink" title="2.2标识符规则"></a>2.2标识符规则</h4><p>1.以字母、下划线、美元符号开头$开头，其他部分是字母、下划线、$、数字的任意组合；</p>
<p>2.Java标识符大小写敏感，且长度无限制；</p>
<p>3.标识符不可以是Java的关键字；</p>
<p>4.类名首字母大写，方法和变量的标识符遵循驼峰命名原则；</p>
<h4 id="2-3Java的关键字-保留字"><a href="#2-3Java的关键字-保留字" class="headerlink" title="2.3Java的关键字/保留字"></a>2.3Java的关键字/保留字</h4><p>边用边学边记</p>
<h4 id="2-4变量的本质"><a href="#2-4变量的本质" class="headerlink" title="2.4变量的本质"></a>2.4变量的本质</h4><p>变量=可操作的存储空间；通过变量名来访问对应的存储空间，从而操作这个存储空间的值；</p>
<h4 id="2-5变量的分类"><a href="#2-5变量的分类" class="headerlink" title="2.5变量的分类"></a>2.5变量的分类</h4><p>局部变量（local variable）方法或语句块内部定义的变量。生命周期是从声名位置开始到方法或语句块执行完毕为止；必须进行初始化操作；</p>
<p>成员变量/实例变量（member variable）方法外部、类的内部定义的变量。从属于对象，生命周期伴随对象始终；可以默认初始化；</p>
<p>静态变量/类变量（static variable）使用static定义，从属于类，生命周期伴随类始终，从类加载到卸载。</p>
<h4 id="2-6常量（Constant）和final"><a href="#2-6常量（Constant）和final" class="headerlink" title="2.6常量（Constant）和final"></a>2.6常量（Constant）和final</h4><p>常量通常指的是一个固定值，使用final来定义一个常量，一旦被初始化以后就不能再修改；</p>
<p>变量和常量命令规范，见名知意；</p>
<p>常量命名采用大写字母和下划线的方式；</p>
<p>方法名：首字母小写和驼峰原则；</p>
<h4 id="2-7基本类型数据介绍"><a href="#2-7基本类型数据介绍" class="headerlink" title="2.7基本类型数据介绍"></a>2.7基本类型数据介绍</h4><p>数值型-byte、short、int、long、float、double</p>
<p>字符型（文本型）-char</p>
<p>布尔型-boolean</p>
<h4 id="2-8整型变量和整型常量"><a href="#2-8整型变量和整型常量" class="headerlink" title="2.8整型变量和整型常量"></a>2.8整型变量和整型常量</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用存储空间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">1字节</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">2字节</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">4字节</td>
</tr>
<tr>
<td align="center">Long</td>
<td align="center">8字节</td>
</tr>
</tbody></table>
<p>八进制，以0开头；</p>
<p>十六进制，以0x或0X开头；</p>
<p>二进制，以0b或0B开头；</p>
<h4 id="2-9浮点型变量和BigDecimal的使用"><a href="#2-9浮点型变量和BigDecimal的使用" class="headerlink" title="2.9浮点型变量和BigDecimal的使用"></a>2.9浮点型变量和BigDecimal的使用</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用存储空间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center">4字节</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8字节</td>
</tr>
</tbody></table>
<p>科学记数形式，314e2(3.14)、314E2（314.0）；</p>
<p>java.math包下两个类：BigInteger和BigDecimal可以处理任意长度的数值；</p>
<h4 id="2-10字符类型"><a href="#2-10字符类型" class="headerlink" title="2.10字符类型"></a>2.10字符类型</h4><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用存储空间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Char</td>
<td align="center">2个字节</td>
</tr>
</tbody></table>
<p>Unicode编码，允许有65536个字符；也可以采用十六进制的值表示；</p>
<table>
<thead>
<tr>
<th align="center">转义符</th>
<th align="center">含义</th>
<th align="center">Unicode值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\b</td>
<td align="center">推格(backspace)</td>
<td align="center">\u0008</td>
</tr>
<tr>
<td align="center">\n</td>
<td align="center">换行</td>
<td align="center">\u000a</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车</td>
<td align="center">\u000d</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表符(tab)</td>
<td align="center">\u0009</td>
</tr>
<tr>
<td align="center">\ “</td>
<td align="center">双引号</td>
<td align="center">\u0022</td>
</tr>
<tr>
<td align="center">\ ‘</td>
<td align="center">单引号</td>
<td align="center">\u0027</td>
</tr>
<tr>
<td align="center">\ \</td>
<td align="center">反斜杠</td>
<td align="center">\u005c</td>
</tr>
</tbody></table>
<h4 id="2-11布尔型"><a href="#2-11布尔型" class="headerlink" title="2.11布尔型"></a>2.11布尔型</h4><p>boolean类型有两个常量值，true和false，在内存中占一位；</p>
<h4 id="2-12算数运算符"><a href="#2-12算数运算符" class="headerlink" title="2.12算数运算符"></a>2.12算数运算符</h4><p><code>+ - * / % 二元运算符</code></p>
<p><code> ++、-- 一元运算符</code> </p>
<h4 id="2-13赋值及其扩展运算符"><a href="#2-13赋值及其扩展运算符" class="headerlink" title="2.13赋值及其扩展运算符"></a>2.13赋值及其扩展运算符</h4><p><code> 运算符 +=、-=、*=、/=、%=</code></p>
<p>关系运算符</p>
<table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">==</td>
<td align="center">等于</td>
</tr>
<tr>
<td align="center">!=</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于或等于</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于或等于</td>
</tr>
</tbody></table>
<h4 id="2-14逻辑运算符"><a href="#2-14逻辑运算符" class="headerlink" title="2.14逻辑运算符"></a>2.14逻辑运算符</h4><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">逻辑与 &amp;</td>
<td align="center">两个都为true,结果为true</td>
</tr>
<tr>
<td align="center">逻辑或|</td>
<td align="center">两个有一个为true，结果为true</td>
</tr>
<tr>
<td align="center">短路与&amp;&amp;</td>
<td align="center">只要有一个为false，结果为false</td>
</tr>
<tr>
<td align="center">短路或||</td>
<td align="center">只要有一个为true，结果直接为true</td>
</tr>
<tr>
<td align="center">逻辑非!</td>
<td align="center">取反</td>
</tr>
<tr>
<td align="center">逻辑异或^</td>
<td align="center">相同为false，不同为true</td>
</tr>
</tbody></table>
<h4 id="2-15位运算符"><a href="#2-15位运算符" class="headerlink" title="2.15位运算符"></a>2.15位运算符</h4><p>二进制位的运算；</p>
<table>
<thead>
<tr>
<th align="center">位运算符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">～</td>
<td align="center">取反</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">按位与</td>
</tr>
<tr>
<td align="center">｜</td>
<td align="center">按位或</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">按位异或</td>
</tr>
<tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移运算符，左移1位相当于乘2</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">右移运算符，右移1位相当于除2取商</td>
</tr>
</tbody></table>
<h4 id="2-16字符串连接"><a href="#2-16字符串连接" class="headerlink" title="2.16字符串连接"></a>2.16字符串连接</h4><p><code>字符串连接符+</code>；</p>
<h4 id="2-17条件运算符"><a href="#2-17条件运算符" class="headerlink" title="2.17条件运算符"></a>2.17条件运算符</h4><p><code>X？Y：Z</code></p>
<p>其中 x 为 boolean 类型表达式，先计算 x 的值，若为true，则整个运算的结果为表达式 y 的值，否则整个运算结果为表达式 z 的值。</p>
<h1 id="2020年12月"><a href="#2020年12月" class="headerlink" title="2020年12月"></a>2020年12月</h1><h4 id="2-18运算符优先级"><a href="#2-18运算符优先级" class="headerlink" title="2.18运算符优先级"></a>2.18运算符优先级</h4><p><img src="/images/yxj.png" alt="yxj"></p>
<p>逻辑非&gt;逻辑与&gt;逻辑或</p>
<p>自动类型转化</p>
<p>自动类型转换指的是容量小的数据类型可以自动转换为容量大的数据类型。</p>
<p><img src="/images/zh.png" alt="yxj"></p>
<p>强制类型转化</p>
<p>强制类型转换，又被称为造型，用于显式的转换一个数值的类型。在有可能丢失信息的情况下进行的转换是通过造型来完成的，但可能造成精度降低或溢出。</p>
<p><code> (type) var</code></p>
<p>运算符“()”中的type表示将值var想要转换成的目标数据类型。当将一种类型强制转换成另一种类型，而又超出了目标类型的表数范围，就会被截断成为一个完全不同的值。</p>
<p>基本类型常见错误</p>
<p>操作比较大的数时，要留意是否溢出，尤其是整数操作时。</p>
<p>L和l 的问题：不要命名名字为l的变量，l容易和1混淆。</p>
<h4 id="2-19-Scanner类"><a href="#2-19-Scanner类" class="headerlink" title="2.19 Scanner类"></a>2.19 Scanner类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scanner=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String name=scanner.nextLine();</span><br></pre></td></tr></table></figure>

<h2 id="3-控制语句"><a href="#3-控制语句" class="headerlink" title="3 控制语句"></a>3 控制语句</h2><h4 id="3-1控制语句"><a href="#3-1控制语句" class="headerlink" title="3.1控制语句"></a>3.1控制语句</h4><p>“顺序结构”代表“先执行a，再执行b”的逻辑。</p>
<p>“选择结构”代表“如果…，则…”的逻辑。</p>
<p>“循环结构”代表“如果…，则再继续…”的逻辑。</p>
<h4 id="3-2选择结构"><a href="#3-2选择结构" class="headerlink" title="3.2选择结构"></a>3.2选择结构</h4><ol>
<li><p>if单选择结构</p>
</li>
<li><p>if-else双选择结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">	语句<span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>if-else if-else多选择结构</p>
</li>
<li><p>switch结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>: </span><br><span class="line">语句序列<span class="number">1</span>;</span><br><span class="line">[<span class="keyword">break</span>];</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line"> 语句序列<span class="number">2</span>;</span><br><span class="line">[<span class="keyword">break</span>];</span><br><span class="line">     … … …      … …</span><br><span class="line">[<span class="keyword">default</span>:</span><br><span class="line"> 默认语句;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="3-3循环结构"><a href="#3-3循环结构" class="headerlink" title="3.3循环结构"></a>3.3循环结构</h4><p> 循环结构分两大类，一类是当型，一类是直到型。</p>
<p>while循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (布尔表达式) &#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>do-while循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">        循环体;</span><br><span class="line">     &#125; <span class="keyword">while</span>(布尔表达式) ;</span><br></pre></td></tr></table></figure>

<p>for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始表达式; 布尔表达式; 迭代因子) &#123;</span><br><span class="line">      循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.continue用在while，do-while中，continue 语句立刻跳到循环首部，越过了当前循环的其余部分。</p>
<p>2.continue用在for循环中，跳到for循环的迭代因子部分。</p>
<p>3.在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。</p>
<h4 id="3-4方法"><a href="#3-4方法" class="headerlink" title="3.4方法"></a>3.4方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符<span class="number">1</span>  修饰符<span class="number">2</span>  …]   返回值类型    方法名(形式参数列表)&#123;</span><br><span class="line">    Java语句；… … …</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>对象名.方法名(实参列表)</p>
<p>   方法的详细说明</p>
<ol>
<li><p>形式参数：在方法声明时用于接收外界传入的数据。</p>
</li>
<li><p>实参：调用方法时实际传给方法的数据。</p>
</li>
<li><p>返回值：方法在执行完毕后返还给调用它的环境的数据。</p>
</li>
<li><p>返回值类型：事先约定的返回值的数据类型，如无返回值，必须显示指定为为void。</p>
</li>
</ol>
<h3 id="4Java面向对象"><a href="#4Java面向对象" class="headerlink" title="4Java面向对象"></a>4Java面向对象</h3><h4 id="4-1类和对象"><a href="#4-1类和对象" class="headerlink" title="4.1类和对象　"></a>4.1类和对象　</h4><p><strong>类：</strong>我们叫做class。 <strong>对象：</strong>我们叫做Object,instance(实例)。以后我们说某个类的对象，某个类的实例。是一样的意思</p>
<p>1.对象是具体的事物;类是对对象的抽象;</p>
<p>2.类可以看成一类对象的模板，对象可以看成该类的一个具体实例。</p>
<p>3.类是用于描述同一类型的对象的一个抽象概念，类中定义了这一类对象所应具有的共同的属性、方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每一个源文件必须有且只有一个public class，并且类名和文件名保持一致！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span> </span>&#123; <span class="comment">// 一个Java文件可以同时定义多个class</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于一个类来说，一般有三种常见的成员：属性field、方法method、构造器constructor。这三种成员都可以定义零个或多个。</p>
<h4 id="4-3方法"><a href="#4-3方法" class="headerlink" title="4.3方法"></a>4.3方法</h4><p>方法用于定义该类或该类实例的行为特征和功能实现。方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符]  方法返回值类型  方法名(形参列表) &#123;</span><br><span class="line">    <span class="comment">// n条语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造器也叫构造方法(constructor)，用于对象的初始化。构造器是一个创建对象时被自动调用的特殊方法，目的是对象的初始化。构造器的名称应与类的名称一致。Java通过new关键字来调用构造器，从而返回该类的实例，是一种特殊的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 类名(形参列表)&#123;</span><br><span class="line">    <span class="comment">//n条语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>通过new关键字调用!!</p>
</li>
<li><p>构造器虽然有返回值，但是不能定义返回值类型(返回值的类型肯定是本类)，不能在构造器里使用return返回某个值。</p>
</li>
<li><p>如果我们没有定义构造器，则编译器会自动定义一个无参的构造函数。如果已定义则编译器不会自动添加!</p>
</li>
<li><p>构造器的方法名必须和类名一致!</p>
</li>
</ol>
<h4 id="4-4内存泄漏"><a href="#4-4内存泄漏" class="headerlink" title="4.4内存泄漏"></a>4.4内存泄漏</h4><p><strong>创建大量无用对象</strong></p>
<p><strong>静态集合类的使用</strong></p>
<p><strong>各种连接对象(IO流对象、数据库连接对象、网络连接对象)未关闭</strong></p>
<p><strong>监听器的使用</strong></p>
<h4 id="4-5关键字"><a href="#4-5关键字" class="headerlink" title="4.5关键字"></a>4.5关键字</h4><p>构造方法是创建Java对象的重要途径，通过new关键字调用构造器时，构造器也确实返回该类的对象，但这个对象并不是完全由构造器负责创建。创建一个对象分为如下四步：</p>
<p>　　1. 分配对象空间，并将对象成员变量初始化为0或空</p>
<p>　　2. 执行属性值的显示初始化</p>
<p>　　3. 执行构造方法</p>
<p>　　4. 返回对象的地址给相关的变量</p>
<p>　　this的本质就是“创建好的对象的地址”! 由于在构造方法调用前，对象已经创建。因此，在构造方法中也可以使用this代表“当前对象” 。</p>
<p>在类中，用static声明的成员变量为静态成员变量，也称为类变量。 类变量的生命周期和类相同，在整个应用程序执行期间都有效。它有如下特点：</p>
<p>　　1. 为该类的公用变量，属于类，被该类的所有实例共享，在类被载入时被显式初始化。</p>
<p>　　2. 对于该类的所有对象来说，static成员变量只有一份。被该类的所有对象共享!!</p>
<p>　　3. 一般用“类名.类属性/方法”来调用。(也可以通过对象引用或类名(不需要实例化)访问静态成员。)</p>
<p>　　4. 在static方法中不可直接访问非static的成员。</p>
<h4 id="4-6静态初始化块"><a href="#4-6静态初始化块" class="headerlink" title="4.6静态初始化块"></a>4.6静态初始化块</h4><p>构造方法用于对象的初始化!静态初始化块，用于类的初始化操作!在静态初始化块中不能直接访问非static成员。</p>
<h4 id="4-7参数传值的机制"><a href="#4-7参数传值的机制" class="headerlink" title="4.7参数传值的机制"></a>4.7参数传值的机制</h4><p>Java中，方法中所有参数都是“值传递”，也就是“传递的是值的副本”。 也就是说，我们得到的是“原参数的复印件，而不是原件”。因此，复印件改变不会影响原件。</p>
<h4 id="4-8-package-import"><a href="#4-8-package-import" class="headerlink" title="4.8 package\import"></a>4.8 package\import</h4><p>　1. 通常是类的第一句非注释性语句。</p>
<p>　2. 包名：域名倒着写即可，再加上模块名，便于内部管理类。</p>
<p>JDK主要包：java.lang;java.awt;java.net;java.io;java.util;</p>
<p>如果我们要使用其他包的类，需要使用import导入，从而可以在本类中直接通过类名来调用，否则就需要书写类的完整包名和类名。import后，便于编写代码，提高可维护性。</p>
<h3 id="5Java面向对象特征"><a href="#5Java面向对象特征" class="headerlink" title="5Java面向对象特征"></a>5Java面向对象特征</h3><h4 id="5-1继承-extends"><a href="#5-1继承-extends" class="headerlink" title="5.1继承(extends)"></a>5.1继承(extends)</h4><p>1.继承让我们更加容易实现类的扩展。 比如，我们定义了人类，再定义Boy类就只需要扩展人类即可。实现了代码的重用，不用再重新发明轮子(don’t  reinvent  wheels)。从英文字面意思理解，extends的意思是“扩展”。子类是父类的扩展。现实世界中的继承无处不在。</p>
<p>2.instanceof是二元运算符，左边是对象，右边是类；当对象是右面类或子类所创建对象时，返回true；否则，返回false。</p>
<p>1.父类也称作超类、基类、派生类等。</p>
<p>2.Java中只有单继承，没有像C++那样的多继承。多继承会引起混乱，使得继承链过于复杂，系统难于维护。</p>
<p>3.Java中类没有多继承，接口有多继承。</p>
<p>4.子类继承父类，可以得到父类的全部属性和方法 (除了父类的构造方法)，但不见得可以直接访问(比如，父类私有的属性和方法)。</p>
<p>5.如果定义一个类时，没有调用extends，则它的父类是：java.lang.Object。</p>
<h4 id="5-2方法重写-override"><a href="#5-2方法重写-override" class="headerlink" title="5.2方法重写(override)"></a>5.2方法重写(override)</h4><p>子类通过重写父类的方法，可以用自身的行为替换父类的行为。方法的重写是实现多态的必要条件。</p>
<p><strong>方法的重写需要符合下面的三个要点：</strong></p>
<p>   1.“==”： 方法名、形参列表相同。</p>
<p>   2.“≤”：返回值类型和声明异常类型，子类小于等于父类。</p>
<p>   3.“≥”： 访问权限，子类大于等于父类。</p>
<p>Object 的 equals 方法默认就是比较两个对象的hashcode，是同一个对象的引用时返回 true 否则返回 false。但是，我们可以根据我们自己的要求重写equals方法。</p>
<p>super是直接父类对象的引用。可以通过super来访问父类中被子类覆盖的方法或属性。</p>
<p>   使用super调用普通方法，语句没有位置限制，可以在子类中随便调用。</p>
<p>   若是构造方法的第一行代码没有显式的调用super(…)或者this(…);那么Java默认都会调用super(),含义是调用父类的无参数构造方法。这里的super()可以省略。</p>
<h4 id="5-3封装"><a href="#5-3封装" class="headerlink" title="5.3封装"></a>5.3封装</h4><p><strong>优点：</strong></p>
<ol>
<li><p>提高代码的安全性。</p>
</li>
<li><p>提高代码的复用性。</p>
</li>
<li><p>“高内聚”：封装细节，便于修改内部代码，提高可维护性。</p>
</li>
<li><p>“低耦合”：简化外部调用，便于调用者使用，便于扩展和协作。</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>同一个类</th>
<th>同一个包中</th>
<th>子类</th>
<th align="center">所有类</th>
</tr>
</thead>
<tbody><tr>
<td>Private</td>
<td>*</td>
<td></td>
<td></td>
<td align="center"></td>
</tr>
<tr>
<td>Default</td>
<td>*</td>
<td>*</td>
<td></td>
<td align="center"></td>
</tr>
<tr>
<td>Protected</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td align="center"></td>
</tr>
<tr>
<td>Public</td>
<td>*</td>
<td>*</td>
<td>*</td>
<td align="center">*</td>
</tr>
</tbody></table>
</li>
<li><p>private 表示私有，只有自己类能访问</p>
</li>
<li><p>default表示没有修饰符修饰，只有同一个包的类能访问</p>
</li>
<li><p>protected表示可以被同一个包的类以及其他包中的子类访问</p>
</li>
<li><p>public表示可以被该项目的所有包中的所有类访问</p>
</li>
</ol>
<p><strong>类属性的处理：</strong></p>
<p>1.一般使用private访问权限。</p>
<p>2.提供相应的get/set方法来访问相关属性，这些方法通常是public修饰的，以提供对属性的赋值与读取操作(注意：boolean变量的get方法是is开头!)。</p>
<p>3.一些只用于本类的辅助性方法可以用private修饰，希望其他类调用的方法用public修饰。</p>
<h4 id="5-4多态"><a href="#5-4多态" class="headerlink" title="5.4多态"></a>5.4多态</h4><p>多态的要点：</p>
<ol>
<li><p>多态是方法的多态，不是属性的多态(多态与属性无关)。</p>
</li>
<li><p>多态的存在要有3个必要条件：继承，方法重写，父类引用指向子类对象。</p>
</li>
<li><p>父类引用指向子类对象后，用该父类引用调用子类重写的方法，此时多态就出现了。</p>
</li>
</ol>
<p>父类引用指向子类对象，我们称这个过程为向上转型，属于自动类型转换。</p>
<p>   向上转型后的父类引用变量只能调用它编译类型的方法，不能调用它运行时类型的方法。这时，我们就需要进行类型的强制转换，我们称之为向下转型!</p>
<p><strong>·抽象方法</strong></p>
<p>   使用abstract修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。</p>
<p><strong>·抽象类</strong></p>
<p>   包含抽象方法的类就是抽象类。通过abstract方法定义规范，然后要求子类必须定义具体实现。通过抽象类，我们就可以做到严格限制子类的设计，使子类之间更加通用。</p>
<h4 id="5-5接口"><a href="#5-5接口" class="headerlink" title="5.5接口"></a>5.5接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[访问修饰符]  interface 接口名   [extends  父接口1，父接口2…]  &#123;</span><br><span class="line">常量定义；  </span><br><span class="line">方法定义；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义接口的详细说明：</strong></p>
<ol>
<li><p>访问修饰符：只能是public或默认。</p>
</li>
<li><p>接口名：和类名采用相同命名机制。</p>
</li>
<li><p>extends：接口可以多继承。</p>
</li>
<li><p>常量：接口中的属性只能是常量，总是：public static final 修饰。不写也是。</p>
</li>
<li><p>方法：接口中的方法只能是：public abstract。 省略的话，也是public abstract。</p>
</li>
</ol>
<p><strong>要点</strong></p>
<ol>
<li><p>子类通过implements来实现接口中的规范。</p>
</li>
<li><p>接口不能创建实例，但是可用于声明引用变量类型。</p>
</li>
<li><p>一个类实现了接口，必须实现接口中所有的方法，并且这些方法只能是public的。</p>
</li>
<li><p>JDK1.7之前，接口中只能包含静态常量、抽象方法，不能有普通属性、构造方法、普通方法。</p>
</li>
<li><p>JDK1.8后，接口中包含普通的静态方法。</p>
</li>
</ol>
<h3 id="6异常机制"><a href="#6异常机制" class="headerlink" title="6异常机制"></a>6异常机制</h3><p><strong>异常机制本质</strong></p>
<p>   就是当程序出现错误，程序安全退出的机制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//语句块</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>处理过程：</strong></p>
<ol>
<li><p><strong>抛出异常：</strong>在执行一个方法时，如果发生异常，则这个方法生成代表该异常的一个对象，停止当前执行路径，并把异常对象提交给JRE。</p>
</li>
<li><p><strong>捕获异常：</strong>JRE得到该异常后，寻找相应的代码来处理该异常。JRE在方法的调用栈中查找，从生成异常的方法开始回溯，直到找到相应的异常处理代码为止。</p>
<p>Java对异常进行了分类，不同类型的异常分别用不同的Java类表示，所有异常的根类为java.lang.Throwable，Throwable下面又派生了两个子类：Error和Exception。</p>
</li>
</ol>
<h4 id="6-1Error"><a href="#6-1Error" class="headerlink" title="6.1Error"></a>6.1Error</h4><p>Error是程序无法处理的错误，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM(Java 虚拟机)出现的问题。例如，Java虚拟机运行错误(Virtual MachineError)，当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止。</p>
<p>   Error表明系统JVM已经处于不可恢复的崩溃状态中。我们不需要管它。</p>
<h4 id="6-2-Exception"><a href="#6-2-Exception" class="headerlink" title="6.2 Exception"></a>6.2 Exception</h4><p>Exception是程序本身能够处理的异常，如：空指针异常(NullPointerException)、数组下标越界异常(ArrayIndexOutOfBoundsException)、类型转换异常(ClassCastException)、算术异常(ArithmeticException)等。</p>
<p>   Exception类是所有异常类的父类，其子类对应了各种各样可能出现的异常事件。 通常Java的异常可分为：</p>
<ol>
<li><p>RuntimeException 运行时异常</p>
</li>
<li><p>CheckedException 已检查异常</p>
<p>派生于RuntimeException的异常，如被 0 除、数组下标越界、空指针等，其产生比较频繁，处理麻烦，如果显式的声明或捕获将会对程序可读性和运行效率影响很大。 因此由系统自动检测并将它们交给缺省的异常处理程序(用户可不必对其处理)。</p>
<p>这类异常通常是由编程错误导致的，所以在编写程序时，并不要求必须使用异常处理机制来处理这类异常,经常需要通过增加“逻辑处理来避免这些异常”。</p>
</li>
</ol>
<p>所有不是RuntimeException的异常，统称为Checked Exception，又被称为“已检查异常”，如IOException、SQLException等以及用户自定义的Exception异常。 这类异常在编译时就必须做出处理，否则无法通过编译。</p>
<h4 id="6-3异常处理"><a href="#6-3异常处理" class="headerlink" title="6.3异常处理"></a>6.3异常处理</h4><p>捕获异常是通过3个关键词来实现的：try-catch-finally。用try来执行一段程序，如果出现异常，系统抛出一个异常，可以通过它的类型来捕捉(catch)并处理它，最后一步是通过finally语句为异常处理提供一个统一的出口，finally所指定的代码都要被执行(catch语句可有多条;finally语句最多只能有一条，根据自己的需要可有可无)。</p>
<p>当CheckedException产生时，不一定立刻处理它，可以再把异常throws出去。</p>
<p>   在方法中使用try-catch-finally是由这个方法来处理异常。但是在一些情况下，当前方法并不需要处理发生的异常，而是向上传递给调用它的方法处理。</p>
<p>   如果一个方法中可能产生某种异常，但是并不能确定如何处理这种异常，则应根据异常规范在方法的首部声明该方法可能抛出的异常。</p>
<p>   如果一个方法抛出多个已检查异常，就必须在方法的首部列出所有的异常，之间以逗号隔开。</p>
<h3 id="7P数组"><a href="#7P数组" class="headerlink" title="7P数组"></a>7P数组</h3><p>数组的三个基本特点：</p>
<ol>
<li><p>长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</p>
</li>
<li><p>其元素必须是相同类型，不允许出现混合类型。</p>
</li>
<li><p>数组类型可以是任何数据类型，包括基本类型和引用类型。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type[]  arr_name; ``<span class="comment">//（推荐使用这种方式）</span></span><br><span class="line">type  arr_name[];</span><br></pre></td></tr></table></figure>

<p>数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。</p>
<p>增强for循环for-each是JDK1.5新增加的功能，专门用于读取数组或集合中所有的元素，即对数组进行遍历。</p>
<p><strong>注意事项</strong></p>
<ol>
<li><p>for-each增强for循环在遍历数组过程中不能修改数组中某元素的值。</p>
</li>
<li><p>for-each仅适用于遍历，不涉及有关索引(下标)的操作。</p>
</li>
</ol>
<h3 id="8P常用类"><a href="#8P常用类" class="headerlink" title="8P常用类"></a>8P常用类</h3><p><code>每日进度  &gt; = 5P</code></p>
<p><a href="https://www.bilibili.com/video/av59529105/?pikaqiu">视频地址</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java基础记录</tag>
      </tags>
  </entry>
</search>
